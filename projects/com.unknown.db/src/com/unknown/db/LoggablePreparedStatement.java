package com.unknown.db;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Logger;

import com.unknown.util.log.Levels;
import com.unknown.util.log.Trace;

public class LoggablePreparedStatement implements PreparedStatement {
	private static final Logger log = Trace.create(LoggablePreparedStatement.class);

	private PreparedStatement statement;
	private String sqlStatement;
	private List<Object> values = new ArrayList<>();

	private boolean trace;

	public LoggablePreparedStatement(PreparedStatement statement, String sqlStatement) {
		if(statement == null || sqlStatement == null) {
			throw new IllegalArgumentException("no null statement allowed");
		}

		this.statement = statement;
		this.sqlStatement = sqlStatement;
		this.trace = log.isLoggable(Levels.DEBUG);
	}

	public void setTrace(boolean trace) {
		this.trace = trace;
	}

	public String getStatement() {
		StringBuilder buf = new StringBuilder(sqlStatement.length());
		int state = 0;
		int i = 0;
		for(char ch : sqlStatement.toCharArray()) {
			switch(state) {
			case 0: // beginning
				switch(ch) {
				case ' ':
				case '\n':
				case '\t':
					break;
				case '\'':
					state = 1;
					buf.append(ch);
					break;
				default:
					state = 2;
					buf.append(ch);
				}
				break;
			case 1: // quote
				switch(ch) {
				case '\'':
					state = 2;
					buf.append(ch);
					break;
				default:
					buf.append(ch);
				}
				break;
			case 2: // text
				switch(ch) {
				case ' ':
				case '\n':
				case '\t':
					state = 3;
					break;
				case '\'':
					state = 1;
					buf.append(ch);
					break;
				case '?':
					buf.append(getValue(i++));
					break;
				default:
					buf.append(ch);
				}
				break;
			case 3: // space
				switch(ch) {
				case ' ':
				case '\n':
				case '\t':
					break;
				case '\'':
					state = 1;
					buf.append(" '");
					break;
				case '?':
					state = 2;
					buf.append(' ');
					buf.append(getValue(i++));
					break;
				default:
					state = 2;
					buf.append(' ');
					buf.append(ch);
				}
				break;
			}
		}
		return buf.toString();
	}

	private String getValue(int i) {
		if(trace && i < values.size()) {
			Object value = values.get(i);
			if(value == null) {
				return "NULL";
			} else if(value instanceof Byte || value instanceof Short || value instanceof Integer ||
					value instanceof Long || value instanceof Float || value instanceof Double) {
				return String.valueOf(value);
			} else {
				return "'" + value.toString().replace("'", "''") + "'";
			}
		} else {
			return "?";
		}
	}

	private void setValue(int i, Object val) {
		if(i <= values.size()) {
			values.set(i - 1, val);
		} else {
			for(int j = values.size() + 1; j < i; j++) {
				values.add(null);
			}
			values.add(val);
		}
	}

	@Override
	public String toString() {
		return "LoggablePreparedStatement[" + getStatement() + "]";
	}

	@Override
	public void addBatch(String sql) throws SQLException {
		statement.addBatch(sql);
	}

	@Override
	public void cancel() throws SQLException {
		statement.cancel();
	}

	@Override
	public void clearBatch() throws SQLException {
		statement.clearBatch();
	}

	@Override
	public void clearWarnings() throws SQLException {
		statement.clearWarnings();
	}

	@Override
	public void close() throws SQLException {
		statement.close();
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		statement.closeOnCompletion();
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		log.log(Levels.WARNING, Messages.LPS_NO_PREPARE.format(sql));
		return statement.execute(sql);
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		log.log(Levels.WARNING, Messages.LPS_NO_PREPARE.format(sql));
		return statement.execute(sql, autoGeneratedKeys);
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		log.log(Levels.WARNING, Messages.LPS_NO_PREPARE.format(sql));
		return statement.execute(sql, columnIndexes);
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		log.log(Levels.WARNING, Messages.LPS_NO_PREPARE.format(sql));
		return statement.execute(sql, columnNames);
	}

	@Override
	public int[] executeBatch() throws SQLException {
		return statement.executeBatch();
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		log.log(Levels.WARNING, Messages.LPS_NO_PREPARE.format(sql));
		return statement.executeQuery(sql);
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		log.log(Levels.WARNING, Messages.LPS_NO_PREPARE.format(sql));
		return statement.executeUpdate(sql);
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		log.log(Levels.WARNING, Messages.LPS_NO_PREPARE.format(sql));
		return statement.executeUpdate(sql, autoGeneratedKeys);
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		log.log(Levels.WARNING, Messages.LPS_NO_PREPARE.format(sql));
		return statement.executeUpdate(sql, columnIndexes);
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		log.log(Levels.WARNING, Messages.LPS_NO_PREPARE.format(sql));
		return statement.executeUpdate(sql, columnNames);
	}

	@Override
	public Connection getConnection() throws SQLException {
		return statement.getConnection();
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return statement.getFetchDirection();
	}

	@Override
	public int getFetchSize() throws SQLException {
		return statement.getFetchSize();
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return statement.getGeneratedKeys();
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return statement.getMaxFieldSize();
	}

	@Override
	public int getMaxRows() throws SQLException {
		return statement.getMaxRows();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return statement.getMoreResults();
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return statement.getMoreResults(current);
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return statement.getQueryTimeout();
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return statement.getResultSet();
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return statement.getResultSetConcurrency();
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return statement.getResultSetHoldability();
	}

	@Override
	public int getResultSetType() throws SQLException {
		return statement.getResultSetType();
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return statement.getUpdateCount();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return statement.getWarnings();
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return statement.isCloseOnCompletion();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return statement.isClosed();
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return statement.isPoolable();
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		statement.setCursorName(name);
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		statement.setEscapeProcessing(enable);
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		statement.setFetchDirection(direction);
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		statement.setFetchSize(rows);
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		statement.setMaxFieldSize(max);
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		statement.setMaxRows(max);
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		statement.setPoolable(poolable);
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		statement.setQueryTimeout(seconds);
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return statement.isWrapperFor(iface);
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return statement.unwrap(iface);
	}

	@Override
	public void addBatch() throws SQLException {
		statement.addBatch();
	}

	@Override
	public void clearParameters() throws SQLException {
		statement.clearParameters();
	}

	@Override
	public boolean execute() throws SQLException {
		return statement.execute();
	}

	@Override
	public ResultSet executeQuery() throws SQLException {
		return statement.executeQuery();
	}

	@Override
	public int executeUpdate() throws SQLException {
		return statement.executeUpdate();
	}

	@Override
	public ResultSetMetaData getMetaData() throws SQLException {
		return statement.getMetaData();
	}

	@Override
	public ParameterMetaData getParameterMetaData() throws SQLException {
		return statement.getParameterMetaData();
	}

	@Override
	public void setArray(int parameterIndex, Array x) throws SQLException {
		if(log.isLoggable(Levels.DEBUG)) {
			setValue(parameterIndex, x);
		}
		statement.setArray(parameterIndex, x);
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* CLOB */");
		}
		statement.setAsciiStream(parameterIndex, x);
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* CLOB */");
		}
		statement.setAsciiStream(parameterIndex, x, length);
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* CLOB */");
		}
		statement.setAsciiStream(parameterIndex, x, length);
	}

	@Override
	public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setBigDecimal(parameterIndex, x);
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* BLOB */");
		}
		statement.setBinaryStream(parameterIndex, x);
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* BLOB */");
		}
		statement.setBinaryStream(parameterIndex, x, length);
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* BLOB */");
		}
		statement.setBinaryStream(parameterIndex, x, length);
	}

	@Override
	public void setBlob(int parameterIndex, Blob x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* BLOB */");
		}
		statement.setBlob(parameterIndex, x);
	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* BLOB */");
		}
		statement.setBlob(parameterIndex, inputStream);
	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* BLOB */");
		}
		statement.setBlob(parameterIndex, inputStream, length);
	}

	@Override
	public void setBoolean(int parameterIndex, boolean x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setBoolean(parameterIndex, x);
	}

	@Override
	public void setByte(int parameterIndex, byte x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setByte(parameterIndex, x);
	}

	@Override
	public void setBytes(int parameterIndex, byte[] x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setBytes(parameterIndex, x);
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* CLOB */");
		}
		statement.setCharacterStream(parameterIndex, reader);
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* CLOB */");
		}
		statement.setCharacterStream(parameterIndex, reader, length);
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* CLOB */");
		}
		statement.setCharacterStream(parameterIndex, reader, length);
	}

	@Override
	public void setClob(int parameterIndex, Clob x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* CLOB */");
		}
		statement.setClob(parameterIndex, x);
	}

	@Override
	public void setClob(int parameterIndex, Reader reader) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* CLOB */");
		}
		statement.setClob(parameterIndex, reader);
	}

	@Override
	public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* CLOB */");
		}
		statement.setClob(parameterIndex, reader, length);
	}

	@Override
	public void setDate(int parameterIndex, Date x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setDate(parameterIndex, x);
	}

	@Override
	public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setDate(parameterIndex, x, cal);
	}

	@Override
	public void setDouble(int parameterIndex, double x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setDouble(parameterIndex, x);
	}

	@Override
	public void setFloat(int parameterIndex, float x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setFloat(parameterIndex, x);
	}

	@Override
	public void setInt(int parameterIndex, int x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setInt(parameterIndex, x);
	}

	@Override
	public void setLong(int parameterIndex, long x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setLong(parameterIndex, x);
	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* CLOB */");
		}
		statement.setNCharacterStream(parameterIndex, value);
	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* CLOB */");
		}
		statement.setNCharacterStream(parameterIndex, value, length);
	}

	@Override
	public void setNClob(int parameterIndex, NClob value) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* CLOB */");
		}
		statement.setNClob(parameterIndex, value);
	}

	@Override
	public void setNClob(int parameterIndex, Reader reader) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* CLOB */");
		}
		statement.setNClob(parameterIndex, reader);
	}

	@Override
	public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* CLOB */");
		}
		statement.setNClob(parameterIndex, reader, length);
	}

	@Override
	public void setNString(int parameterIndex, String value) throws SQLException {
		if(trace) {
			setValue(parameterIndex, value);
		}
		statement.setNString(parameterIndex, value);
	}

	@Override
	public void setNull(int parameterIndex, int sqlType) throws SQLException {
		if(trace) {
			setValue(parameterIndex, sqlType);
		}
		statement.setNull(parameterIndex, sqlType);
	}

	@Override
	public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {
		if(trace) {
			setValue(parameterIndex, sqlType);
		}
		statement.setNull(parameterIndex, sqlType, typeName);
	}

	@Override
	public void setObject(int parameterIndex, Object x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setObject(parameterIndex, x);
	}

	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setObject(parameterIndex, x, targetSqlType);
	}

	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setObject(parameterIndex, x, targetSqlType, scaleOrLength);
	}

	@Override
	public void setRef(int parameterIndex, Ref x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setRef(parameterIndex, x);
	}

	@Override
	public void setRowId(int parameterIndex, RowId x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setRowId(parameterIndex, x);
	}

	@Override
	public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
		if(trace) {
			setValue(parameterIndex, xmlObject);
		}
		statement.setSQLXML(parameterIndex, xmlObject);
	}

	@Override
	public void setShort(int parameterIndex, short x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setShort(parameterIndex, x);
	}

	@Override
	public void setString(int parameterIndex, String x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setString(parameterIndex, x);
	}

	@Override
	public void setTime(int parameterIndex, Time x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setTime(parameterIndex, x);
	}

	@Override
	public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setTime(parameterIndex, x, cal);
	}

	@Override
	public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setTimestamp(parameterIndex, x);
	}

	@Override
	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setTimestamp(parameterIndex, x, cal);
	}

	@Override
	public void setURL(int parameterIndex, URL x) throws SQLException {
		if(trace) {
			setValue(parameterIndex, x);
		}
		statement.setURL(parameterIndex, x);
	}

	@Override
	@Deprecated
	@SuppressWarnings("deprecation")
	public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
		if(trace) {
			setValue(parameterIndex, "/* CLOB */");
		}
		statement.setUnicodeStream(parameterIndex, x, length);
	}

	@Override
	protected void finalize() {
		try {
			if(!isClosed()) {
				log.log(Levels.WARNING, Messages.LPS_LEAK.format(sqlStatement));
				try {
					close();
				} catch(SQLException e) {
					log.log(Levels.WARNING, Messages.LPS_CLOSE_STMT_FAIL.format(e.getMessage()), e);
				}
			}
		} catch(SQLException e) {
			log.log(Levels.WARNING, Messages.LPS_ISCLOSED_FAIL.format(e.getMessage()), e);
		}
	}
}
