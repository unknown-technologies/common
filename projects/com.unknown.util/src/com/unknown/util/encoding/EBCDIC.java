package com.unknown.util.encoding;

import java.io.UnsupportedEncodingException;
import java.util.HashMap;

// TODO: this only implements CP500
public class EBCDIC {
	public final static char NUL = 0x00;
	public final static char SOH = 0x01;
	public final static char STX = 0x02;
	public final static char ETX = 0x03;
	public final static char PT = 0x09;
	public final static char NL = 0x0A;
	public final static char FF = 0x0C;
	public final static char CR = 0x0D;
	public final static char DLE = 0x10;
	public final static char SBA = 0x11;
	public final static char EUA = 0x12;
	public final static char IC = 0x13;
	public final static char EM = 0x19;
	public final static char DUP = 0x1C;
	public final static char SF = 0x1D;
	public final static char FM = 0x1E;
	public final static char ITB = 0x1F;
	public final static char ETB = 0x17;
	public final static char ESC = 0x1B;
	public final static char ENQ = 0x05;
	public final static char SYN = 0x16;
	public final static char EOT = 0x04;
	public final static char RA = 0x14;
	public final static char NAK = 0x15;
	public final static char SUB = 0x1A;
	public final static char SP = 0x20;

	public final static char GE = 0x08;

	public final static String CHARSET = "cp500";

	// @formatter:off
//	public final static char[] ascii_to_ebcdic = {
//			/*          x0   x1   x2   x3   x4   x5   x6   x7   x8   x9   xA   xB   xC   xD   xE   xF */
//			 /* 0x */ 0x00,0x01,0x02,0x03,0x37,0x2D,0x2E,0x2F,0x16,0x05,0x25,0x0B,0x0C,0x0D,0x0E,0x0F,
//			 /* 1x */ 0x10,0x11,0x12,0x13,0x3C,0x3D,0x32,0x26,0x18,0x19,0x1A,0x27,0x22,0x1D,0x35,0x1F,
//			 /* 2x */ 0x40,0x5A,0x7F,0x7B,0x5B,0x6C,0x50,0x7D,0x4D,0x5D,0x5C,0x4E,0x6B,0x60,0x4B,0x61,
//			 /* 3x */ 0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0x7A,0x5E,0x4C,0x7E,0x6E,0x6F,
//			 /* 4x */ 0x7C,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,
//			 /* 5x */ 0xD7,0xD8,0xD9,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xAD,0xE0,0xBD,0x5F,0x6D,
//			 /* 6x */ 0x79,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x91,0x92,0x93,0x94,0x95,0x96,
//			 /* 7x */ 0x97,0x98,0x99,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xC0,0x6A,0xD0,0xA1,0x07,
//			 /* 8x */ 0x68,0xDC,0x51,0x42,0x43,0x44,0x47,0x48,0x52,0x53,0x54,0x57,0x56,0x58,0x63,0x67,
//			 /* 9x */ 0x71,0x9C,0x9E,0xCB,0xCC,0xCD,0xDB,0xDD,0xDF,0xEC,0xFC,0xB0,0xB1,0xB2,0xB3,0xB4,
//			 /* Ax */ 0x45,0x55,0xCE,0xDE,0x49,0x69,0x04,0x06,0xAB,0x08,0xBA,0xB8,0xB7,0xAA,0x8A,0x8B,
//			 /* Bx */ 0x09,0x0A,0x14,0xBB,0x15,0xB5,0xB6,0x17,0x1B,0xB9,0x1C,0x1E,0xBC,0x20,0xBE,0xBF,
//			 /* Cx */ 0x21,0x23,0x24,0x28,0x29,0x2A,0x2B,0x2C,0x30,0x31,0xCA,0x33,0x34,0x36,0x38,0xCF,
//			 /* Dx */ 0x39,0x3A,0x3B,0x3E,0x41,0x46,0x4A,0x4F,0x59,0x62,0xDA,0x64,0x65,0x66,0x70,0x72,
//			 /* Ex */ 0x73,0xE1,0x74,0x75,0x76,0x77,0x78,0x80,0x8C,0x8D,0x8E,0xEB,0x8F,0xED,0xEE,0xEF,
//			 /* Fx */ 0x90,0x9A,0x9B,0x9D,0x9F,0xA0,0xAC,0xAE,0xAF,0xFD,0xFE,0xFB,0x3F,0xEA,0xFA,0xFF,
//	};		/*          x0   x1   x2   x3   x4   x5   x6   x7   x8   x9   xA   xB   xC   xD   xE   xF */
//
//	public final static char[] ebcdic_to_ascii = {
//			/*          x0   x1   x2   x3   x4   x5   x6   x7   x8   x9   xA   xB   xC   xD   xE   xF */
//			 /* 0x */ 0x00,0x01,0x02,0x03,0xA6,0x09,0xA7,0x7F,0xA9,0xB0,0xB1,0x0B,0x0C,0x0D,0x0E,0x0F,
//			 /* 1x */ 0x10,0x11,0x12,0x13,0xB2,0x0A,0x08,0xB7,0x18,0x19,0x1A,0xB8,0xBA,0x1D,0xBB,0x1F,
//			 /* 2x */ 0xBD,0xC0,0x1C,0xC1,0xC2,0x0A,0x17,0x1B,0xC3,0xC4,0xC5,0xC6,0xC7,0x05,0x06,0x07,
//			 /* 3x */ 0xC8,0xC9,0x16,0xCB,0xCC,0x1E,0xCD,0x04,0xCE,0xD0,0xD1,0xD2,0x14,0x15,0xD3,0xFC,
//			 /* 4x */ 0x20,0xD4,0x83,0x84,0x85,0xA0,0xD5,0x86,0x87,0xA4,0xD6,0x2E,0x3C,0x28,0x2B,0xD7,
//			 /* 5x */ 0x26,0x82,0x88,0x89,0x8A,0xA1,0x8C,0x8B,0x8D,0xD8,0x21,0x24,0x2A,0x29,0x3B,0x5E,
//			 /* 6x */ 0x2D,0x2F,0xD9,0x8E,0xDB,0xDC,0xDD,0x8F,0x80,0xA5,0x7C,0x2C,0x25,0x5F,0x3E,0x3F,
//			 /* 7x */ 0xDE,0x90,0xDF,0xE0,0xE2,0xE3,0xE4,0xE5,0xE6,0x60,0x3A,0x23,0x40,0x27,0x3D,0x22,
//			 /* 8x */ 0xE7,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0xAE,0xAF,0xE8,0xE9,0xEA,0xEC,
//			 /* 9x */ 0xF0,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,0x70,0x71,0x72,0xF1,0xF2,0x91,0xF3,0x92,0xF4,
//			 /* Ax */ 0xF5,0x7E,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0xAD,0xA8,0xF6,0x5B,0xF7,0xF8,
//			 /* Bx */ 0x9B,0x9C,0x9D,0x9E,0x9F,0xB5,0xB6,0xAC,0xAB,0xB9,0xAA,0xB3,0xBC,0x5D,0xBE,0xBF,
//			 /* Cx */ 0x7B,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0xCA,0x93,0x94,0x95,0xA2,0xCF,
//			 /* Dx */ 0x7D,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,0x50,0x51,0x52,0xDA,0x96,0x81,0x97,0xA3,0x98,
//			 /* Ex */ 0x5C,0xE1,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0xFD,0xEB,0x99,0xED,0xEE,0xEF,
//			 /* Fx */ 0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0xFE,0xFB,0x9A,0xF9,0xFA,0xFF,
//	};		/*          x0   x1   x2   x3   x4   x5   x6   x7   x8   x9   xA   xB   xC   xD   xE   xF */
	public final static char[] ascii_to_ebcdic = {
			/*          x0   x1   x2   x3   x4   x5   x6   x7   x8   x9   xA   xB   xC   xD   xE   xF */
			 /* 0x */ 0x00,0x01,0x02,0x03,0x37,0x2D,0x2E,0x2F,0x16,0x05,0x25,0x0B,0x0C,0x0D,0x0E,0x0F,
			 /* 1x */ 0x10,0x11,0x12,0x13,0x3C,0x3D,0x32,0x26,0x18,0x19,0x1A,0x27,0x22,0x1D,0x35,0x1F,
			 /* 2x */ 0x40,0x5A,0x7F,0x7B,0x5B,0x6C,0x50,0x7D,0x4D,0x5D,0x5C,0x4E,0x6B,0x60,0x4B,0x61,
			 /* 3x */ 0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0x7A,0x5E,0x4C,0x7E,0x6E,0x6F,
			 /* 4x */ 0x7C,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,
			 /* 5x */ 0xD7,0xD8,0xD9,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xAD,0xE0,0xBD,0x5F,0x6D,
			 /* 6x */ 0x79,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x91,0x92,0x93,0x94,0x95,0x96,
			 /* 7x */ 0x97,0x98,0x99,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xC0,0x6A,0xD0,0xA1,0x07,
			 /* 8x */ 0x68,0xDC,0x51,0x42,0x43,0x44,0x47,0x48,0x52,0x53,0x54,0x57,0x56,0x58,0x63,0x67,
			 /* 9x */ 0x71,0x9C,0x9E,0xCB,0xCC,0xCD,0xDB,0xDD,0xDF,0xEC,0xFC,0xB0,0xB1,0xB2,0xB3,0xB4,
			 /* Ax */ 0x45,0x55,0xCE,0xDE,0x49,0x69,0x04,0x06,0xAB,0x08,0xBA,0xB8,0xB7,0xAA,0x8A,0x8B,
			 /* Bx */ 0x09,0x0A,0x14,0xBB,0x15,0xB5,0xB6,0x17,0x1B,0xB9,0x1C,0x1E,0xBC,0x20,0xBE,0xBF,
			 /* Cx */ 0x21,0x23,0x24,0x28,0x29,0x2A,0x2B,0x2C,0x30,0x31,0xCA,0x33,0x34,0x36,0x38,0xCF,
			 /* Dx */ 0x39,0x3A,0x3B,0x3E,0xEB,0x46,0x4A,0x4F,0x80,0x62,0xDA,0x64,0x65,0x66,0x70,0x59,
			 /* Ex */ 0x73,0xE1,0x74,0x75,0x76,0x77,0x78,0x41,0x8C,0x8D,0x8E,0x53,0x8F,0xED,0xEE,0xEF,
			 /* Fx */ 0x90,0x9A,0x9B,0x9D,0x9F,0xA0,0xAC,0xAE,0xAF,0xFD,0xFE,0xFB,0x3F,0xEA,0xFA,0xFF,
	};		/*          x0   x1   x2   x3   x4   x5   x6   x7   x8   x9   xA   xB   xC   xD   xE   xF */

	public final static char[] ebcdic_to_ascii = {
			/*          x0   x1   x2   x3   x4   x5   x6   x7   x8   x9   xA   xB   xC   xD   xE   xF */
			 /* 0x */ 0x00,0x01,0x02,0x03,0xA6,0x09,0xA7,0x7F,0xA9,0xB0,0xB1,0x0B,0x0C,0x0D,0x0E,0x0F,
			 /* 1x */ 0x10,0x11,0x12,0x13,0xB2,0x0A,0x08,0xB7,0x18,0x19,0x1A,0xB8,0xBA,0x1D,0xBB,0x1F,
			 /* 2x */ 0xBD,0xC0,0x1C,0xC1,0xC2,0x0A,0x17,0x1B,0xC3,0xC4,0xC5,0xC6,0xC7,0x05,0x06,0x07,
			 /* 3x */ 0xC8,0xC9,0x16,0xCB,0xCC,0x1E,0xCD,0x04,0xCE,0xD0,0xD1,0xD2,0x14,0x15,0xD3,0xFC,
			 /* 4x */ 0x20,0xD4,0x83,0x84,0x85,0xA0,0xD5,0x86,0x87,0xA4,0xD6,0x2E,0x3C,0x28,0x2B,0xD7,
			 /* 5x */ 0x26,0x82,0x88,0x89,0x8A,0xA1,0x8C,0x8B,0x8D,0xDF,0x21,0x24,0x2A,0x29,0x3B,0x5E,
			 /* 6x */ 0x2D,0x2F,0xD9,0x8E,0xDB,0xDC,0xDD,0x8F,0x80,0xA5,0x7C,0x2C,0x25,0x5F,0x3E,0x3F,
			 /* 7x */ 0xDE,0x90,0xD8,0xE0,0xE2,0xE3,0xE4,0xE5,0xE6,0x60,0x3A,0x23,0x40,0x27,0x3D,0x22,
			 /* 8x */ 0xE7,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0xAE,0xAF,0xE8,0xE9,0xEA,0xEC,
			 /* 9x */ 0xF0,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,0x70,0x71,0x72,0xF1,0xF2,0x91,0xF3,0x92,0xF4,
			 /* Ax */ 0xF5,0x7E,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0xAD,0xA8,0xF6,0x5B,0xF7,0xF8,
			 /* Bx */ 0x9B,0x9C,0x9D,0x9E,0x9F,0xB5,0xB6,0xAC,0xAB,0xB9,0xAA,0xB3,0xBC,0x5D,0xBE,0xBF,
			 /* Cx */ 0x7B,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0xCA,0x93,0x94,0x95,0xA2,0xCF,
			 /* Dx */ 0x7D,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,0x50,0x51,0x52,0xDA,0x96,0x81,0x97,0xA3,0x98,
			 /* Ex */ 0x5C,0xE1,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0xFD,0xEB,0x99,0xED,0xEE,0xEF,
			 /* Fx */ 0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0xFE,0xFB,0x9A,0xF9,0xFA,0xFF,
	};		/*          x0   x1   x2   x3   x4   x5   x6   x7   x8   x9   xA   xB   xC   xD   xE   xF */
	// @formatter:on

	private final static HashMap<Character, Character> graphics;
	private final static HashMap<Character, Character> deGraphics;

	static {
		graphics = new HashMap<>();
		graphics.put('\u23b8', (char) 0x83);
		graphics.put('\u23b9', (char) 0x84);
		graphics.put('\u23a5', (char) 0x85);
		graphics.put('\u238c', (char) 0x91);
		graphics.put('\u2590', (char) 0x92);
		graphics.put('\u2580', (char) 0x93);
		graphics.put('\u2584', (char) 0x94);
		graphics.put('\u25a0', (char) 0x95);
		graphics.put('\u2500', (char) 0xA2);
		graphics.put('\u2514', (char) 0xC4);
		graphics.put('\u250C', (char) 0xC5);
		graphics.put('\u2518', (char) 0xD4);
		graphics.put('\u2510', (char) 0xD5);

		deGraphics = new HashMap<>();
		for(Character key : graphics.keySet()) {
			deGraphics.put(graphics.get(key), key);
		}
	}

	private char[] encode;
	private char[] decode;

	public EBCDIC() {
		encode = ascii_to_ebcdic;
		decode = ebcdic_to_ascii;
	}

	public char encode(char c) {
		if(c > encode.length) {
			return 0;
		}
		return encode[c];
	}

	private static byte[] getBytes(char[] c) {
		byte[] b = new byte[c.length];
		for(int i = 0; i < c.length; i++) {
			b[i] = (byte) c[i];
		}
		return b;
	}

	public char[] encode(char[] s) {
		StringBuffer r = new StringBuffer(s.length);
		for(int i = 0; i < s.length; i++) {
			char c = s[i];
			if(c > encode.length && graphics.containsKey(c)) {
				r.append(GE).append(graphics.get(c));
			} else {
				try {
					byte[] re = Character.toString(c).getBytes(CHARSET);
					r.append((char) (re[0] & 0xFF));
				} catch(UnsupportedEncodingException e) {
					r.append(encode[c]);
				}
			}
		}
		return r.toString().toCharArray();
	}

	public byte[] encode(String s) {
		return getBytes(encode(s.toCharArray()));
	}

	public byte[] encode(byte[] b) {
		char[] s = new char[b.length];
		for(int i = 0; i < b.length; i++) {
			s[i] = (char) (b[i] & 0xFF);
		}
		char[] d = encode(s);
		return getBytes(d);
	}

	public char decode(char c) {
		if(c > decode.length) {
			return 0;
		}
		return decode[c];
	}

	public String decode(String s) {
		try {
			return new String(getBytes(s.toCharArray()), CHARSET);
		} catch(UnsupportedEncodingException e) {
			StringBuffer b = new StringBuffer(s.length());
			for(int i = 0; i < s.length(); i++) {
				if(s.charAt(i) == GE) {
					b.append(deGraphics.get(s.charAt(i)));
				} else {
					b.append(decode(s.charAt(i)));
				}
			}
			return b.toString();
		}
	}

	public byte[] decode(byte[] b, int offset, int length) {
		byte[] r = new byte[length];
		for(int i = 0; i < length; i++) {
			r[i] = (byte) decode((char) (b[i + offset] & 0xFF));
		}
		return b;
	}

	public byte[] decode(byte[] b, int length) {
		return decode(b, 0, length);
	}

	public byte[] decode(byte[] b) {
		return decode(b, 0, b.length);
	}
}
