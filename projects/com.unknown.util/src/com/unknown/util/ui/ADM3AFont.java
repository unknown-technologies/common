package com.unknown.util.ui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;
import java.util.HashMap;
import java.util.Map;

public class ADM3AFont {
	public static final int WIDTH = 6;
	public static final int HEIGHT = 9;
	// @formatter:off
	public static final byte[] FONT = {
			/*   */	0b00000,
				0b00000,
				0b00000,
				0b00000,
				0b00000,
				0b00000,
				0b00000,
				0b00000,
				0b00000,

			/* ! */	0b00000,
				0b00100,
				0b00100,
				0b00100,
				0b00100,
				0b00100,
				0b00000,
				0b00100,
				0b00000,

			/* " */	0b00000,
				0b01010,
				0b01010,
				0b01010,
				0b00000,
				0b00000,
				0b00000,
				0b00000,
				0b00000,

			/* # */	0b00000,
				0b01010,
				0b01010,
				0b11111,
				0b01010,
				0b11111,
				0b01010,
				0b01010,
				0b00000,

			/* $ */	0b00000,
				0b00100,
				0b01111,
				0b10100,
				0b01110,
				0b00101,
				0b11110,
				0b00100,
				0b00000,

			/* % */	0b00000,
				0b11000,
				0b11001,
				0b00010,
				0b00100,
				0b01000,
				0b10011,
				0b00011,
				0b00000,

			/* & */	0b00000,
				0b01000,
				0b10100,
				0b10100,
				0b01000,
				0b10101,
				0b10010,
				0b01101,
				0b00000,

			/* ' */	0b00000,
				0b00010,
				0b00010,
				0b00100,
				0b00000,
				0b00000,
				0b00000,
				0b00000,
				0b00000,

			/* ( */	0b00000,
				0b00100,
				0b01000,
				0b10000,
				0b10000,
				0b10000,
				0b01000,
				0b00100,
				0b00000,

			/* ) */	0b00000,
				0b00100,
				0b00010,
				0b00001,
				0b00001,
				0b00001,
				0b00010,
				0b00100,
				0b00000,

			/* * */	0b00000,
				0b00100,
				0b10101,
				0b01110,
				0b00100,
				0b01110,
				0b10101,
				0b00100,
				0b00000,

			/* + */	0b00000,
				0b00000,
				0b00100,
				0b00100,
				0b11111,
				0b00100,
				0b00100,
				0b00000,
				0b00000,

			/* , */	0b00000,
				0b00000,
				0b00000,
				0b00000,
				0b00000,
				0b00100,
				0b00100,
				0b01000,
				0b00000,

			/* - */	0b00000,
				0b00000,
				0b00000,
				0b00000,
				0b11111,
				0b00000,
				0b00000,
				0b00000,
				0b00000,

			/* . */	0b00000,
				0b00000,
				0b00000,
				0b00000,
				0b00000,
				0b00000,
				0b00000,
				0b00100,
				0b00000,

			/* / */	0b00000,
				0b00001,
				0b00001,
				0b00010,
				0b00100,
				0b01000,
				0b10000,
				0b10000,
				0b00000,

			/* 0 */	0b00000,
				0b01110,
				0b10001,
				0b10011,
				0b10101,
				0b11001,
				0b10001,
				0b01110,
				0b00000,

			/* 1 */	0b00000,
				0b00100,
				0b01100,
				0b00100,
				0b00100,
				0b00100,
				0b00100,
				0b01110,
				0b00000,

			/* 2 */	0b00000,
				0b01110,
				0b10001,
				0b00001,
				0b00110,
				0b01000,
				0b10000,
				0b11111,
				0b00000,

			/* 3 */	0b00000,
				0b11111,
				0b00001,
				0b00010,
				0b00110,
				0b00001,
				0b10001,
				0b01110,
				0b00000,

			/* 4 */	0b00000,
				0b00010,
				0b00110,
				0b01010,
				0b10010,
				0b11111,
				0b00010,
				0b00010,
				0b00000,

			/* 5 */	0b00000,
				0b11111,
				0b10000,
				0b11110,
				0b00001,
				0b00001,
				0b10001,
				0b01110,
				0b00000,

			/* 6 */	0b00000,
				0b00111,
				0b01000,
				0b10000,
				0b11110,
				0b10001,
				0b10001,
				0b01110,
				0b00000,

			/* 7 */	0b00000,
				0b11111,
				0b00001,
				0b00010,
				0b00100,
				0b01000,
				0b01000,
				0b01000,
				0b00000,

			/* 8 */	0b00000,
				0b01110,
				0b10001,
				0b10001,
				0b01110,
				0b10001,
				0b10001,
				0b01110,
				0b00000,

			/* 9 */	0b00000,
				0b01110,
				0b10001,
				0b10001,
				0b01111,
				0b00001,
				0b00010,
				0b11100,
				0b00000,

			/* : */	0b00000,
				0b00000,
				0b00000,
				0b00100,
				0b00000,
				0b00100,
				0b00000,
				0b00000,
				0b00000,

			/* ; */	0b00000,
				0b00000,
				0b00000,
				0b00100,
				0b00000,
				0b00100,
				0b00100,
				0b01000,
				0b00000,

			/* < */	0b00000,
				0b00010,
				0b00100,
				0b01000,
				0b10000,
				0b01000,
				0b00100,
				0b00010,
				0b00000,

			/* = */	0b00000,
				0b00000,
				0b00000,
				0b11111,
				0b00000,
				0b11111,
				0b00000,
				0b00000,
				0b00000,

			/* > */	0b00000,
				0b01000,
				0b00100,
				0b00010,
				0b00001,
				0b00010,
				0b00100,
				0b01000,
				0b00000,

			/* ? */	0b00000,
				0b01110,
				0b10001,
				0b00010,
				0b00100,
				0b00100,
				0b00000,
				0b00100,
				0b00000,

			/********************/
			/* @ */	0b00000,
				0b01110,
				0b10001,
				0b10101,
				0b10111,
				0b10110,
				0b10000,
				0b01111,
				0b00000,

			/* A */	0b00000,
				0b00100,
				0b01010,
				0b10001,
				0b10001,
				0b11111,
				0b10001,
				0b10001,
				0b00000,

			/* B */	0b00000,
				0b11110,
				0b10001,
				0b10001,
				0b11110,
				0b10001,
				0b10001,
				0b11110,
				0b00000,

			/* C */	0b00000,
				0b01110,
				0b10001,
				0b10000,
				0b10000,
				0b10000,
				0b10001,
				0b01110,
				0b00000,

			/* D */ 0b00000,
				0b11100,
				0b10010,
				0b10001,
				0b10001,
				0b10001,
				0b10010,
				0b11100,
				0b00000,

			/* E */	0b00000,
				0b11111,
				0b10000,
				0b10000,
				0b11110,
				0b10000,
				0b10000,
				0b11111,
				0b00000,

			/* F */	0b00000,
				0b11111,
				0b10000,
				0b10000,
				0b11110,
				0b10000,
				0b10000,
				0b10000,
				0b00000,

			/* G */	0b00000,
				0b01110,
				0b10001,
				0b10000,
				0b10011,
				0b10001,
				0b10001,
				0b01111,
				0b00000,

			/* H */	0b00000,
				0b10001,
				0b10001,
				0b10001,
				0b11111,
				0b10001,
				0b10001,
				0b10001,
				0b00000,

			/* I */	0b00000,
				0b01110,
				0b00100,
				0b00100,
				0b00100,
				0b00100,
				0b00100,
				0b01110,
				0b00000,

			/* J */	0b00000,
				0b00001,
				0b00001,
				0b00001,
				0b00001,
				0b00001,
				0b10001,
				0b01110,
				0b00000,

			/* K */	0b00000,
				0b10001,
				0b10010,
				0b10100,
				0b11000,
				0b10100,
				0b10010,
				0b10001,
				0b00000,

			/* L */	0b00000,
				0b10000,
				0b10000,
				0b10000,
				0b10000,
				0b10000,
				0b10000,
				0b11111,
				0b00000,

			/* M */	0b00000,
				0b10001,
				0b11011,
				0b10101,
				0b10101,
				0b10001,
				0b10001,
				0b10001,
				0b00000,

			/* N */	0b00000,
				0b10001,
				0b10001,
				0b11001,
				0b10101,
				0b10011,
				0b10001,
				0b10001,
				0b00000,

			/* O */	0b00000,
				0b01110,
				0b10001,
				0b10001,
				0b10001,
				0b10001,
				0b10001,
				0b01110,
				0b00000,

			/* P */	0b00000,
				0b11110,
				0b10001,
				0b10001,
				0b11110,
				0b10000,
				0b10000,
				0b10000,
				0b00000,

			/* Q */	0b00000,
				0b01110,
				0b10001,
				0b10001,
				0b10001,
				0b10101,
				0b10010,
				0b01101,
				0b00000,

			/* R */	0b00000,
				0b11110,
				0b10001,
				0b10001,
				0b11110,
				0b10100,
				0b10010,
				0b10001,
				0b00000,

			/* S */	0b00000,
				0b01110,
				0b10001,
				0b10000,
				0b01110,
				0b00001,
				0b10001,
				0b01110,
				0b00000,

			/* T */	0b00000,
				0b11111,
				0b00100,
				0b00100,
				0b00100,
				0b00100,
				0b00100,
				0b00100,
				0b00000,

			/* U */	0b00000,
				0b10001,
				0b10001,
				0b10001,
				0b10001,
				0b10001,
				0b10001,
				0b01110,
				0b00000,

			/* V */	0b00000,
				0b10001,
				0b10001,
				0b10001,
				0b10001,
				0b10001,
				0b01010,
				0b00100,
				0b00000,

			/* W */	0b00000,
				0b10001,
				0b10001,
				0b10001,
				0b10101,
				0b10101,
				0b11011,
				0b10001,
				0b00000,

			/* X */	0b00000,
				0b10001,
				0b10001,
				0b01010,
				0b00100,
				0b01010,
				0b10001,
				0b10001,
				0b00000,

			/* Y */	0b00000,
				0b10001,
				0b10001,
				0b01010,
				0b00100,
				0b00100,
				0b00100,
				0b00100,
				0b00000,

			/* Z */	0b00000,
				0b11111,
				0b00001,
				0b00010,
				0b00100,
				0b01000,
				0b10000,
				0b11111,
				0b00000,

			/* [ */	0b00000,
				0b11111,
				0b11000,
				0b11000,
				0b11000,
				0b11000,
				0b11000,
				0b11111,
				0b00000,

			/* \ */	0b00000,
				0b10000,
				0b10000,
				0b01000,
				0b00100,
				0b00010,
				0b00001,
				0b00001,
				0b00000,

			/* ] */	0b00000,
				0b11111,
				0b00011,
				0b00011,
				0b00011,
				0b00011,
				0b00011,
				0b11111,
				0b00000,

			/* ^ */	0b00000,
				0b00000,
				0b00000,
				0b00100,
				0b01010,
				0b10001,
				0b00000,
				0b00000,
				0b00000,

			/* _ */	0b00000,
				0b00000,
				0b00000,
				0b00000,
				0b00000,
				0b00000,
				0b00000,
				0b00000,
				0b11111,

			/* ` */	0b00000,
				0b01000,
				0b01000,
				0b00100,
				0b00000,
				0b00000,
				0b00000,
				0b00000,
				0b00000,

			/* a */	0b00000,
				0b00000,
				0b00000,
				0b01111,
				0b00001,
				0b01111,
				0b10001,
				0b01111,
				0b00000,

			/* b */	0b00000,
				0b10000,
				0b10000,
				0b11110,
				0b10001,
				0b10001,
				0b10001,
				0b11110,
				0b00000,

			/* c */	0b00000,
				0b00000,
				0b00000,
				0b01111,
				0b10000,
				0b10000,
				0b10000,
				0b01111,
				0b00000,

			/* d */	0b00000,
				0b00001,
				0b00001,
				0b01111,
				0b10001,
				0b10001,
				0b10001,
				0b01111,
				0b00000,

			/* e */	0b00000,
				0b00000,
				0b00000,
				0b01110,
				0b10001,
				0b11111,
				0b10000,
				0b01111,
				0b00000,

			/* f */	0b00000,
				0b00011,
				0b00100,
				0b01110,
				0b00100,
				0b00100,
				0b00100,
				0b01110,
				0b00000,

			/* g */	0b00000,
				0b00000,
				0b00000,
				0b01110,
				0b10001,
				0b10001,
				0b01110,
				0b00001,
				0b01111,

			/* h */	0b00000,
				0b10000,
				0b10000,
				0b10110,
				0b11001,
				0b10001,
				0b10001,
				0b10001,
				0b00000,

			/* i */	0b00000,
				0b00100,
				0b00000,
				0b01100,
				0b00100,
				0b00100,
				0b00100,
				0b01110,
				0b00000,

			/* j */	0b00000,
				0b00010,
				0b00000,
				0b00110,
				0b00010,
				0b00010,
				0b00010,
				0b10010,
				0b01100,

			/* l */	0b00000,
				0b10000,
				0b10000,
				0b10011,
				0b10100,
				0b11000,
				0b10100,
				0b10011,
				0b00000,

			/* l */	0b00000,
				0b01100,
				0b00100,
				0b00100,
				0b00100,
				0b00100,
				0b00100,
				0b01110,
				0b00000,

			/* m */	0b00000,
				0b00000,
				0b00000,
				0b11011,
				0b10101,
				0b10101,
				0b10101,
				0b10001,
				0b00000,

			/* n */	0b00000,
				0b00000,
				0b00000,
				0b10110,
				0b11001,
				0b10001,
				0b10001,
				0b10001,
				0b00000,

			/* o */	0b00000,
				0b00000,
				0b00000,
				0b01110,
				0b10001,
				0b10001,
				0b10001,
				0b01110,
				0b00000,

			/* p */	0b00000,
				0b00000,
				0b00000,
				0b11110,
				0b10001,
				0b10001,
				0b11110,
				0b10000,
				0b10000,

			/* q */	0b00000,
				0b00000,
				0b00000,
				0b01110,
				0b10010,
				0b10010,
				0b01110,
				0b00010,
				0b00111,

			/* r */	0b00000,
				0b00000,
				0b00000,
				0b10110,
				0b11001,
				0b10000,
				0b10000,
				0b10000,
				0b00000,

			/* s */	0b00000,
				0b00000,
				0b00000,
				0b01111,
				0b10000,
				0b01110,
				0b00001,
				0b11110,
				0b00000,

			/* t */	0b00000,
				0b00100,
				0b00100,
				0b01110,
				0b00100,
				0b00100,
				0b00101,
				0b00010,
				0b00000,

			/* u */	0b00000,
				0b00000,
				0b00000,
				0b10001,
				0b10001,
				0b10001,
				0b10011,
				0b01101,
				0b00000,

			/* v */	0b00000,
				0b00000,
				0b00000,
				0b10001,
				0b10001,
				0b01010,
				0b01010,
				0b00100,
				0b00000,

			/* w */	0b00000,
				0b00000,
				0b00000,
				0b10001,
				0b10001,
				0b10101,
				0b10101,
				0b01010,
				0b00000,

			/* x */	0b00000,
				0b00000,
				0b00000,
				0b10001,
				0b01010,
				0b00100,
				0b01010,
				0b10001,
				0b00000,

			/* y */	0b00000,
				0b00000,
				0b00000,
				0b10001,
				0b10001,
				0b10001,
				0b01111,
				0b00010,
				0b11100,

			/* z */	0b00000,
				0b00000,
				0b00000,
				0b11111,
				0b00010,
				0b00100,
				0b01000,
				0b11111,
				0b00000,

			/* { */	0b00000,
				0b00100,
				0b01000,
				0b01000,
				0b10000,
				0b01000,
				0b01000,
				0b00100,
				0b00000,

			/* | */	0b00000,
				0b00100,
				0b00100,
				0b00100,
				0b00000,
				0b00100,
				0b00100,
				0b00100,
				0b00000,

			/* } */	0b00000,
				0b00100,
				0b00010,
				0b00010,
				0b00001,
				0b00010,
				0b00010,
				0b00100,
				0b00000,

			/* ~ */	0b00000,
				0b00000,
				0b00000,
				0b00001,
				0b01110,
				0b10000,
				0b00000,
				0b00000,
				0b00000,

			/*   */ 0b00000,
				0b11111,
				0b11111,
				0b11111,
				0b11111,
				0b11111,
				0b11111,
				0b11111,
				0b00000
	};
	// @formatter:on

	public static class Glyph {
		private int ch;
		private int fg;
		private int bg;

		private BufferedImage buffer = null;

		public Glyph(char c, int fg, int bg) {
			ch = (c - 0x20) & 0x7F;
			if(ch >= 96) {
				ch = 95;
			}
			this.fg = fg;
			this.bg = bg;
		}

		private void render() {
			DataBufferInt buf = (DataBufferInt) buffer.getRaster().getDataBuffer();
			int[] data = buf.getData();
			for(int y = 0; y < 9; y++) {
				for(int x = 0; x < 5; x++) {
					boolean bit = ((FONT[ch * 9 + y] >> (4 - x)) & 1) != 0;
					data[y * buffer.getWidth() + x] = bit ? fg : bg;
				}
			}
		}

		public void render(Graphics g, int x, int y) {
			if(buffer == null) {
				buffer = new BufferedImage(5, 9, BufferedImage.TYPE_INT_ARGB);
				render();
			}
			g.drawImage(buffer, x, y, null);
		}

		@Override
		public boolean equals(Object o) {
			if(o == null) {
				return false;
			}

			if(!(o instanceof Glyph)) {
				return false;
			}

			Glyph g = (Glyph) o;
			return g.ch == ch && g.fg == fg && g.bg == bg;
		}

		@Override
		public int hashCode() {
			return ch ^ fg ^ bg;
		}
	}

	private static final Map<Long, Glyph> GLYPHS = new HashMap<>();

	private static long getHash(int ch, int fg, int bg) {
		return (ch & 0x7F) | ((fg & 0x00FFFFFFL) << 8) | ((bg & 0x00FFFFFFL) << 32);
	}

	public static Glyph get(char ch, int fg, int bg) {
		long hash = getHash(ch, fg, bg);
		Glyph g = GLYPHS.get(hash);
		if(g == null) {
			g = new Glyph(ch, fg, bg);
			GLYPHS.put(hash, g);
		}
		return g;
	}

	public static void render(Graphics g, int x, int y, Color fg, Color bg, String text) {
		int fgrgb = fg.getRGB();
		int bgrgb = bg.getRGB();
		int px = x;
		int py = y - HEIGHT + 1;
		for(int i = 0; i < text.length(); i++) {
			char c = text.charAt(i);
			Glyph glyph = get(c, fgrgb, bgrgb);
			glyph.render(g, px, py);
			px += WIDTH;
		}
	}
}
